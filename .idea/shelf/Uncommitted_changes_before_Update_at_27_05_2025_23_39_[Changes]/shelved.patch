Index: .idea/shelf/Uncommitted_changes_before_Update_at_15_05_2025_11_20__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_15_05_2025_11_20__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_15_05_2025_11_20__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_15_05_2025_11_20__Changes_.xml	(revision 36389c7781dfbd53134208724ecd8d839e24bcbe)
+++ /dev/null	(revision 36389c7781dfbd53134208724ecd8d839e24bcbe)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_15_05_2025_11_20_[Changes]" date="1747282804940" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_15_05_2025_11_20_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 15/05/2025 11:20 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_15_05_2025_11_20_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_15_05_2025_11_20_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_15_05_2025_11_20_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_15_05_2025_11_20_[Changes]/shelved.patch	(revision 36389c7781dfbd53134208724ecd8d839e24bcbe)
+++ /dev/null	(revision 36389c7781dfbd53134208724ecd8d839e24bcbe)
@@ -1,125 +0,0 @@
-Index: app/src/main/java/com/main/proyek_salez/data/repository/ManagerRepository.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.main.proyek_salez.data.repository\r\n\r\nimport com.main.proyek_salez.data.dao.FoodDao\r\nimport com.main.proyek_salez.data.model.CategoryEntity\r\nimport com.main.proyek_salez.data.model.FoodItemEntity\r\nimport kotlinx.coroutines.flow.Flow\r\nimport javax.inject.Inject\r\nimport javax.inject.Singleton\r\n\r\nsealed class Result<out T> {\r\n    data class Success<out T>(val data: T) : Result<T>()\r\n    data class Error(val message: String) : Result<Nothing>()\r\n}\r\n\r\n@Singleton\r\nclass ManagerRepository @Inject constructor(\r\n    private val foodDao: FoodDao\r\n) {\r\n    suspend fun getAllCategories(): List<CategoryEntity> {\r\n        return foodDao.getAllCategories()\r\n    }\r\n\r\n    suspend fun getAllFoodItems(): Flow<List<FoodItemEntity>> {\r\n        return foodDao.getAllFoodItems()\r\n    }\r\n\r\n    suspend fun addCategory(category: CategoryEntity): Result<Unit> {\r\n        return try {\r\n            if (foodDao.categoryNameExists(category.name)) {\r\n                Result.Error(\"Kategori '${category.name}' sudah ada\")\r\n            } else {\r\n                foodDao.insertCategory(category.copy(id = 0)) // Ensure new ID\r\n                Result.Success(Unit)\r\n            }\r\n        } catch (e: Exception) {\r\n            Result.Error(\"Gagal menambah kategori: ${e.message}\")\r\n        }\r\n    }\r\n\r\n    suspend fun deleteCategory(categoryId: Long): Result<Unit> {\r\n        return try {\r\n            // Check if category has associated food items\r\n            val foodItems = foodDao.getFoodItemsByCategoryId(categoryId)\r\n            if (foodItems.isNotEmpty()) {\r\n                Result.Error(\"Tidak dapat menghapus kategori karena memiliki menu terkait\")\r\n            } else {\r\n                foodDao.deleteCategory(categoryId)\r\n                Result.Success(Unit)\r\n            }\r\n        } catch (e: Exception) {\r\n            Result.Error(\"Gagal menghapus kategori: ${e.message}\")\r\n        }\r\n    }\r\n\r\n    suspend fun addFoodItem(foodItem: FoodItemEntity): Result<Unit> {\r\n        return try {\r\n            val existingItem = foodDao.getFoodItemById(foodItem.id)\r\n            if (existingItem != null) {\r\n                Result.Error(\"ID menu '${foodItem.id}' sudah digunakan\")\r\n            } else {\r\n                foodDao.insertFoodItem(foodItem)\r\n                Result.Success(Unit)\r\n            }\r\n        } catch (e: Exception) {\r\n            Result.Error(\"Gagal menambah menu: ${e.message}\")\r\n        }\r\n    }\r\n\r\n    suspend fun updateFoodItem(foodItem: FoodItemEntity): Result<Unit> {\r\n        return try {\r\n            foodDao.updateFoodItem(foodItem)\r\n            Result.Success(Unit)\r\n        } catch (e: Exception) {\r\n            Result.Error(\"Gagal memperbarui menu: ${e.message}\")\r\n        }\r\n    }\r\n\r\n    suspend fun deleteFoodItem(id: Long): Result<Unit> {\r\n        return try {\r\n            foodDao.deleteFoodItem(id)\r\n            Result.Success(Unit)\r\n        } catch (e: Exception) {\r\n            Result.Error(\"Gagal menghapus menu: ${e.message}\")\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/main/proyek_salez/data/repository/ManagerRepository.kt b/app/src/main/java/com/main/proyek_salez/data/repository/ManagerRepository.kt
---- a/app/src/main/java/com/main/proyek_salez/data/repository/ManagerRepository.kt	(revision ff5c8c1fcd5bb8193f471cd9068875d5150acbf8)
-+++ b/app/src/main/java/com/main/proyek_salez/data/repository/ManagerRepository.kt	(date 1747280100128)
-@@ -20,7 +20,7 @@
-         return foodDao.getAllCategories()
-     }
- 
--    suspend fun getAllFoodItems(): Flow<List<FoodItemEntity>> {
-+    fun getAllFoodItems(): Flow<List<FoodItemEntity>> {
-         return foodDao.getAllFoodItems()
-     }
- 
-Index: app/src/main/java/com/main/proyek_salez/data/viewmodel/CartViewModel.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.main.proyek_salez.data.viewmodel\r\n\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.main.proyek_salez.data.dao.CartItemDao\r\nimport com.main.proyek_salez.data.dao.FoodDao\r\nimport com.main.proyek_salez.data.dao.OrderDao\r\nimport com.main.proyek_salez.data.model.CartItemEntity\r\nimport com.main.proyek_salez.data.model.CartItemWithFood\r\nimport com.main.proyek_salez.data.model.FoodItemEntity\r\nimport com.main.proyek_salez.data.model.OrderEntity\r\nimport com.main.proyek_salez.data.repository.CashierRepository\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.flow.Flow\r\nimport kotlinx.coroutines.flow.SharingStarted\r\nimport kotlinx.coroutines.flow.StateFlow\r\nimport kotlinx.coroutines.flow.first\r\nimport kotlinx.coroutines.flow.map\r\nimport kotlinx.coroutines.flow.stateIn\r\nimport kotlinx.coroutines.launch\r\nimport java.time.LocalDateTime\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass CartViewModel @Inject constructor(\r\n    private val cartItemDao: CartItemDao,\r\n    private val orderDao: OrderDao,\r\n    private val foodDao: FoodDao,\r\n    private val cashierRepository: CashierRepository\r\n) : ViewModel() {\r\n    val customerName = mutableStateOf(\"\")\r\n    val cartItems: Flow<List<CartItemWithFood>> = cartItemDao.getCartItemsWithFood()\r\n    val checkoutRequested = mutableStateOf(false)\r\n    val totalPrice: StateFlow<String> = cartItems.map { items ->\r\n        val total = items.sumOf { it.foodItem.price * it.cartItem.quantity.toDouble() }.toLong()\r\n        \"Rp $total\"\r\n    }.stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), \"Rp 0\")\r\n\r\n    fun addToCart(foodItem: FoodItemEntity) {\r\n        viewModelScope.launch {\r\n            val existingItem = cartItemDao.getCartItemByFoodId(foodItem.id)\r\n            if (existingItem != null) {\r\n                cartItemDao.update(\r\n                    existingItem.copy(quantity = existingItem.quantity + 1)\r\n                )\r\n            } else {\r\n                cartItemDao.insert(\r\n                    CartItemEntity(foodItemId = foodItem.id, quantity = 1)\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    fun decrementItem(foodItem: FoodItemEntity) {\r\n        viewModelScope.launch {\r\n            val existingItem = cartItemDao.getCartItemByFoodId(foodItem.id)\r\n            if (existingItem != null) {\r\n                if (existingItem.quantity > 1) {\r\n                    cartItemDao.update(\r\n                        existingItem.copy(quantity = existingItem.quantity - 1)\r\n                    )\r\n                } else {\r\n                    cartItemDao.delete(existingItem)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun clearCart() {\r\n        viewModelScope.launch {\r\n            cartItemDao.clearCart()\r\n        }\r\n    }\r\n\r\n    fun resetCustomerName() {\r\n        customerName.value = \"\"\r\n    }\r\n\r\n    suspend fun getTotalPrice(): Long {\r\n        val items = cartItems.first()\r\n        return items.sumOf { it.foodItem.price * it.cartItem.quantity.toDouble() }.toLong()\r\n    }\r\n\r\n    fun createOrder(paymentMethod: String) {\r\n        viewModelScope.launch {\r\n            val items = cartItems.first()\r\n            if (items.isNotEmpty()) {\r\n                if (customerName.value.isBlank()) {\r\n                    println(\"Error: customerName is blank\")\r\n                    return@launch\r\n                }\r\n                println(\"Creating order with customerName: ${customerName.value}\")\r\n                cashierRepository.createOrder(\r\n                    customerName = customerName.value,\r\n                    cartItems = items,\r\n                    paymentMethod = paymentMethod\r\n                )\r\n                println(\"Order created successfully for customer: ${customerName.value}\")\r\n            } else {\r\n                println(\"Error: cartItems is empty\")\r\n            }\r\n        }\r\n    }\r\n\r\n    fun searchFoodItems(query: String): Flow<List<FoodItemEntity>> {\r\n            return foodDao.searchFoodItems(query)\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/main/proyek_salez/data/viewmodel/CartViewModel.kt b/app/src/main/java/com/main/proyek_salez/data/viewmodel/CartViewModel.kt
---- a/app/src/main/java/com/main/proyek_salez/data/viewmodel/CartViewModel.kt	(revision ff5c8c1fcd5bb8193f471cd9068875d5150acbf8)
-+++ b/app/src/main/java/com/main/proyek_salez/data/viewmodel/CartViewModel.kt	(date 1747280100182)
-@@ -9,7 +9,6 @@
- import com.main.proyek_salez.data.model.CartItemEntity
- import com.main.proyek_salez.data.model.CartItemWithFood
- import com.main.proyek_salez.data.model.FoodItemEntity
--import com.main.proyek_salez.data.model.OrderEntity
- import com.main.proyek_salez.data.repository.CashierRepository
- import dagger.hilt.android.lifecycle.HiltViewModel
- import kotlinx.coroutines.flow.Flow
-@@ -19,7 +18,6 @@
- import kotlinx.coroutines.flow.map
- import kotlinx.coroutines.flow.stateIn
- import kotlinx.coroutines.launch
--import java.time.LocalDateTime
- import javax.inject.Inject
- 
- @HiltViewModel
-Index: app/src/main/java/com/main/proyek_salez/ui/manager/ManagerScreen.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.main.proyek_salez.ui.manager\r\n\r\nimport android.content.Context\r\nimport android.net.Uri\r\nimport androidx.activity.compose.rememberLauncherForActivityResult\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.compose.animation.animateContentSize\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.ArrowDropDown\r\nimport androidx.compose.material.icons.filled.ArrowDropUp\r\nimport androidx.compose.material.icons.filled.Delete\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material.icons.filled.Menu\r\nimport androidx.compose.material3.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.navigation.NavController\r\nimport com.main.proyek_salez.data.model.FoodItemEntity\r\nimport com.main.proyek_salez.data.model.CategoryEntity\r\nimport com.main.proyek_salez.ui.manager.ManagerViewModel\r\nimport com.main.proyek_salez.ui.SidebarMenu\r\nimport com.main.proyek_salez.ui.theme.*\r\nimport java.io.File\r\nimport java.io.FileOutputStream\r\nimport kotlinx.coroutines.launch\r\nimport androidx.core.net.toUri\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun ManagerScreen(\r\n    navController: NavController,\r\n    viewModel: ManagerViewModel = hiltViewModel()\r\n) {\r\n    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)\r\n    val scope = rememberCoroutineScope()\r\n    var categoryName by rememberSaveable { mutableStateOf(\"\") }\r\n    var foodId by rememberSaveable { mutableStateOf(\"\") }\r\n    var foodName by rememberSaveable { mutableStateOf(\"\") }\r\n    var foodDesc by rememberSaveable { mutableStateOf(\"\") }\r\n    var foodPrice by rememberSaveable { mutableStateOf(\"\") }\r\n    var selectedCategoryId by rememberSaveable { mutableStateOf<Long?>(null) }\r\n    var isCategoryDropdownExpanded by remember { mutableStateOf(false) }\r\n    var selectedImageUri by rememberSaveable { mutableStateOf<String?>(null) }\r\n    var editingFoodItem by rememberSaveable { mutableStateOf<FoodItemEntity?>(null) }\r\n    var showDeleteCategoryDialog by remember { mutableStateOf<Long?>(null) }\r\n    var showDeleteFoodItemDialog by remember { mutableStateOf<Long?>(null) }\r\n\r\n    val categories by viewModel.categories.collectAsState()\r\n    val foodItems by viewModel.foodItems.collectAsState()\r\n    val errorMessage by viewModel.errorMessage.collectAsState()\r\n\r\n    val context = LocalContext.current\r\n    val imagePickerLauncher = rememberLauncherForActivityResult(\r\n        contract = ActivityResultContracts.GetContent()\r\n    ) { uri ->\r\n        selectedImageUri = uri?.toString()\r\n    }\r\n\r\n    val gradientBackground = Brush.verticalGradient(\r\n        colors = listOf(Putih, Jingga, UnguTua)\r\n    )\r\n\r\n    showDeleteCategoryDialog?.let { categoryId ->\r\n        AlertDialog(\r\n            onDismissRequest = { showDeleteCategoryDialog = null },\r\n            title = {\r\n                Text(\r\n                    \"Konfirmasi Hapus\",\r\n                    style = MaterialTheme.typography.headlineLarge.copy(color = UnguTua)\r\n                )\r\n            },\r\n            text = {\r\n                Text(\r\n                    \"Apakah anda yakin untuk menghapus kategori ini?\",\r\n                    style = MaterialTheme.typography.bodyMedium.copy(color = UnguTua)\r\n                )\r\n            },\r\n            confirmButton = {\r\n                TextButton(\r\n                    onClick = {\r\n                        viewModel.deleteCategory(categoryId)\r\n                        showDeleteCategoryDialog = null\r\n                    },\r\n                    colors = ButtonDefaults.textButtonColors(contentColor = UnguTua)\r\n                ) {\r\n                    Text(\"Ya\")\r\n                }\r\n            },\r\n            dismissButton = {\r\n                TextButton(\r\n                    onClick = { showDeleteCategoryDialog = null },\r\n                    colors = ButtonDefaults.textButtonColors(contentColor = UnguTua)\r\n                ) {\r\n                    Text(\"Batal\")\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    showDeleteFoodItemDialog?.let { foodItemId ->\r\n        AlertDialog(\r\n            onDismissRequest = { showDeleteFoodItemDialog = null },\r\n            title = {\r\n                Text(\r\n                    \"Konfirmasi Hapus\",\r\n                    style = MaterialTheme.typography.headlineLarge.copy(color = UnguTua)\r\n                )\r\n            },\r\n            text = {\r\n                Text(\r\n                    \"Apakah anda yakin untuk menghapus menu ini?\",\r\n                    style = MaterialTheme.typography.bodyMedium.copy(color = UnguTua)\r\n                )\r\n            },\r\n            confirmButton = {\r\n                TextButton(\r\n                    onClick = {\r\n                        viewModel.deleteFoodItem(foodItemId)\r\n                        showDeleteFoodItemDialog = null\r\n                    },\r\n                    colors = ButtonDefaults.textButtonColors(contentColor = UnguTua)\r\n                ) {\r\n                    Text(\"Ya\")\r\n                }\r\n            },\r\n            dismissButton = {\r\n                TextButton(\r\n                    onClick = { showDeleteFoodItemDialog = null },\r\n                    colors = ButtonDefaults.textButtonColors(contentColor = UnguTua)\r\n                ) {\r\n                    Text(\"Batal\")\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    ModalNavigationDrawer(\r\n        drawerState = drawerState,\r\n        drawerContent = {\r\n            SidebarMenu(\r\n                navController = navController,\r\n                onCloseDrawer = {\r\n                    scope.launch {\r\n                        drawerState.close()\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .background(brush = gradientBackground)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    .padding(16.dp),\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Row(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth(),\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    IconButton(\r\n                        onClick = {\r\n                            scope.launch {\r\n                                drawerState.open()\r\n                            }\r\n                        },\r\n                        modifier = Modifier.padding(start = 2.dp)\r\n                    ) {\r\n                        Icon(\r\n                            imageVector = Icons.Default.Menu,\r\n                            contentDescription = \"Menu\",\r\n                            tint = UnguTua\r\n                        )\r\n                    }\r\n                }\r\n                Spacer(modifier = Modifier.height(16.dp))\r\n                Column(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .verticalScroll(rememberScrollState())\r\n                        .animateContentSize(),\r\n                    verticalArrangement = Arrangement.spacedBy(16.dp),\r\n                    horizontalAlignment = Alignment.CenterHorizontally\r\n                ) {\r\n                    Spacer(modifier = Modifier.height(140.dp))\r\n                    Text(\r\n                        text = \"SELAMAT DATANG,\",\r\n                        style = MaterialTheme.typography.headlineLarge.copy(\r\n                            color = Oranye,\r\n                            fontWeight = FontWeight.Bold\r\n                        )\r\n                    )\r\n                    Text(\r\n                        text = \"DIO!\",\r\n                        style = MaterialTheme.typography.headlineLarge.copy(\r\n                            color = UnguTua,\r\n                            fontWeight = FontWeight.Bold\r\n                        )\r\n                    )\r\n                    Text(\r\n                        text = \"ADA YANG BISA DIBANTU?\",\r\n                        style = MaterialTheme.typography.headlineLarge.copy(\r\n                            color = Oranye,\r\n                            fontWeight = FontWeight.Bold\r\n                        )\r\n                    )\r\n                    Spacer(modifier = Modifier.height(16.dp))\r\n                    Card(\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        colors = CardDefaults.cardColors(containerColor = Putih),\r\n                        elevation = CardDefaults.cardElevation(4.dp)\r\n                    ) {\r\n                        Column(\r\n                            modifier = Modifier.padding(16.dp),\r\n                            verticalArrangement = Arrangement.spacedBy(8.dp)\r\n                        ) {\r\n                            Text(\r\n                                \"Tambah\",\r\n                                style = MaterialTheme.typography.headlineLarge.copy(\r\n                                    color = UnguTua,\r\n                                    fontWeight = FontWeight.Bold\r\n                                )\r\n                            )\r\n                            OutlinedTextField(\r\n                                value = categoryName,\r\n                                onValueChange = { categoryName = it },\r\n                                label = { Text(\"Nama Kategori\") },\r\n                                modifier = Modifier.fillMaxWidth(),\r\n                                colors = OutlinedTextFieldDefaults.colors(\r\n                                    unfocusedContainerColor = Putih,\r\n                                    focusedContainerColor = Putih,\r\n                                    focusedBorderColor = UnguTua,\r\n                                    unfocusedBorderColor = AbuAbu\r\n                                ),\r\n                                shape = RoundedCornerShape(50)\r\n                            )\r\n                            Button(\r\n                                onClick = {\r\n                                    viewModel.clearErrorMessage()\r\n                                    if (categoryName.isBlank()) {\r\n                                        viewModel.setErrorMessage(\"Nama kategori tidak boleh kosong\")\r\n                                    } else {\r\n                                        viewModel.addCategory(categoryName)\r\n                                        if (viewModel.errorMessage.value == null) {\r\n                                            categoryName = \"\"\r\n                                        }\r\n                                    }\r\n                                },\r\n                                modifier = Modifier\r\n                                    .align(Alignment.End)\r\n                                    .height(48.dp),\r\n                                colors = ButtonDefaults.buttonColors(containerColor = Oranye),\r\n                                shape = RoundedCornerShape(50)\r\n                            ) {\r\n                                Text(\r\n                                    \"Tambah Kategori\",\r\n                                    style = MaterialTheme.typography.headlineLarge.copy(\r\n                                        color = UnguTua,\r\n                                        fontWeight = FontWeight.Bold\r\n                                    )\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Card(\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        colors = CardDefaults.cardColors(containerColor = Putih),\r\n                        elevation = CardDefaults.cardElevation(4.dp)\r\n                    ) {\r\n                        Column(\r\n                            modifier = Modifier.padding(16.dp),\r\n                            verticalArrangement = Arrangement.spacedBy(8.dp)\r\n                        ) {\r\n                            Text(\r\n                                if (editingFoodItem == null) \"Tambah Menu\" else \"Edit Menu\",\r\n                                style = MaterialTheme.typography.headlineLarge.copy(\r\n                                    color = UnguTua,\r\n                                    fontWeight = FontWeight.Bold\r\n                                )\r\n                            )\r\n                            OutlinedTextField(\r\n                                value = foodId,\r\n                                onValueChange = { foodId = it.filter { it.isDigit() } },\r\n                                label = { Text(\"ID Menu\") },\r\n                                modifier = Modifier.fillMaxWidth(),\r\n                                enabled = editingFoodItem == null,\r\n                                colors = OutlinedTextFieldDefaults.colors(\r\n                                    unfocusedContainerColor = Putih,\r\n                                    focusedContainerColor = Putih,\r\n                                    focusedBorderColor = UnguTua,\r\n                                    unfocusedBorderColor = AbuAbu\r\n                                ),\r\n                                shape = RoundedCornerShape(50)\r\n                            )\r\n                            OutlinedTextField(\r\n                                value = foodName,\r\n                                onValueChange = { foodName = it },\r\n                                label = { Text(\"Nama Menu\") },\r\n                                modifier = Modifier.fillMaxWidth(),\r\n                                colors = OutlinedTextFieldDefaults.colors(\r\n                                    unfocusedContainerColor = Putih,\r\n                                    focusedContainerColor = Putih,\r\n                                    focusedBorderColor = UnguTua,\r\n                                    unfocusedBorderColor = AbuAbu\r\n                                ),\r\n                                shape = RoundedCornerShape(50)\r\n                            )\r\n                            OutlinedTextField(\r\n                                value = foodDesc,\r\n                                onValueChange = { foodDesc = it },\r\n                                label = { Text(\"Deskripsi Menu\") },\r\n                                modifier = Modifier.fillMaxWidth(),\r\n                                colors = OutlinedTextFieldDefaults.colors(\r\n                                    unfocusedContainerColor = Putih,\r\n                                    focusedContainerColor = Putih,\r\n                                    focusedBorderColor = UnguTua,\r\n                                    unfocusedBorderColor = AbuAbu\r\n                                ),\r\n                                shape = RoundedCornerShape(50)\r\n                            )\r\n                            OutlinedTextField(\r\n                                value = foodPrice,\r\n                                onValueChange = { foodPrice = it.filter { it.isDigit() || it == '.' } },\r\n                                label = { Text(\"Harga Menu\") },\r\n                                modifier = Modifier.fillMaxWidth(),\r\n                                colors = OutlinedTextFieldDefaults.colors(\r\n                                    unfocusedContainerColor = Putih,\r\n                                    focusedContainerColor = Putih,\r\n                                    focusedBorderColor = UnguTua,\r\n                                    unfocusedBorderColor = AbuAbu\r\n                                ),\r\n                                shape = RoundedCornerShape(50)\r\n                            )\r\n                            Button(\r\n                                onClick = { imagePickerLauncher.launch(\"image/*\") },\r\n                                modifier = Modifier\r\n                                    .fillMaxWidth()\r\n                                    .height(48.dp),\r\n                                colors = ButtonDefaults.buttonColors(containerColor = Oranye),\r\n                                shape = RoundedCornerShape(50)\r\n                            ) {\r\n                                Text(\r\n                                    if (selectedImageUri == null) \"Pilih Gambar (Opsional)\" else \"Gambar Dipilih\",\r\n                                    style = MaterialTheme.typography.headlineLarge.copy(\r\n                                        color = UnguTua,\r\n                                        fontWeight = FontWeight.Bold\r\n                                    )\r\n                                )\r\n                            }\r\n                            Box {\r\n                                OutlinedTextField(\r\n                                    value = categories.find { it.id == selectedCategoryId }?.name ?: \"Pilih Kategori\",\r\n                                    onValueChange = {},\r\n                                    readOnly = true,\r\n                                    modifier = Modifier\r\n                                        .fillMaxWidth()\r\n                                        .clickable { isCategoryDropdownExpanded = true },\r\n                                    colors = OutlinedTextFieldDefaults.colors(\r\n                                        unfocusedContainerColor = Putih,\r\n                                        focusedContainerColor = Putih,\r\n                                        focusedBorderColor = UnguTua,\r\n                                        unfocusedBorderColor = AbuAbu\r\n                                    ),\r\n                                    shape = RoundedCornerShape(50),\r\n                                    trailingIcon = {\r\n                                        IconButton(onClick = { isCategoryDropdownExpanded = true }) {\r\n                                            Icon(\r\n                                                imageVector = if (isCategoryDropdownExpanded) Icons.Default.ArrowDropUp else Icons.Default.ArrowDropDown,\r\n                                                contentDescription = null,\r\n                                                tint = UnguTua\r\n                                            )\r\n                                        }\r\n                                    }\r\n                                )\r\n                                DropdownMenu(\r\n                                    expanded = isCategoryDropdownExpanded,\r\n                                    onDismissRequest = { isCategoryDropdownExpanded = false },\r\n                                    modifier = Modifier.fillMaxWidth()\r\n                                ) {\r\n                                    categories.forEach { category ->\r\n                                        DropdownMenuItem(\r\n                                            text = { Text(category.name, style = MaterialTheme.typography.bodyLarge.copy(color = UnguTua)) },\r\n                                            onClick = {\r\n                                                selectedCategoryId = category.id\r\n                                                isCategoryDropdownExpanded = false\r\n                                            },\r\n                                            contentPadding = PaddingValues(horizontal = 16.dp, vertical = 8.dp)\r\n                                        )\r\n                                    }\r\n                                }\r\n                            }\r\n                            Row(\r\n                                modifier = Modifier.fillMaxWidth(),\r\n                                horizontalArrangement = Arrangement.SpaceBetween\r\n                            ) {\r\n                                if (editingFoodItem != null) {\r\n                                    TextButton(\r\n                                        onClick = {\r\n                                            foodId = \"\"\r\n                                            foodName = \"\"\r\n                                            foodDesc = \"\"\r\n                                            foodPrice = \"\"\r\n                                            selectedImageUri = null\r\n                                            selectedCategoryId = null\r\n                                            editingFoodItem = null\r\n                                            viewModel.clearErrorMessage()\r\n                                        },\r\n                                        colors = ButtonDefaults.textButtonColors(contentColor = UnguTua)\r\n                                    ) {\r\n                                        Text(\"Batal\", style = MaterialTheme.typography.bodyLarge.copy(color = UnguTua))\r\n                                    }\r\n                                }\r\n                                Button(\r\n                                    onClick = {\r\n                                        viewModel.clearErrorMessage()\r\n                                        when {\r\n                                            foodId.isBlank() -> viewModel.setErrorMessage(\"ID menu tidak boleh kosong\")\r\n                                            foodName.isBlank() -> viewModel.setErrorMessage(\"Nama menu tidak boleh kosong\")\r\n                                            foodPrice.isBlank() -> viewModel.setErrorMessage(\"Harga menu tidak boleh kosong\")\r\n                                            selectedCategoryId == null -> viewModel.setErrorMessage(\"Pilih kategori terlebih dahulu\")\r\n                                            else -> {\r\n                                                val imagePath: String? = selectedImageUri?.let { uri ->\r\n                                                    saveImageToInternalStorage(context, uri.toUri())\r\n                                                }\r\n                                                if (editingFoodItem == null) {\r\n                                                    viewModel.addFoodItem(\r\n                                                        id = foodId.toLongOrNull() ?: 0,\r\n                                                        name = foodName,\r\n                                                        description = foodDesc,\r\n                                                        price = foodPrice.toDoubleOrNull() ?: 0.0,\r\n                                                        imagePath = imagePath,\r\n                                                        categoryId = selectedCategoryId!!\r\n                                                    )\r\n                                                } else {\r\n                                                    viewModel.updateFoodItem(\r\n                                                        id = editingFoodItem!!.id,\r\n                                                        name = foodName,\r\n                                                        description = foodDesc,\r\n                                                        price = foodPrice.toDoubleOrNull() ?: 0.0,\r\n                                                        imagePath = imagePath,\r\n                                                        categoryId = selectedCategoryId!!\r\n                                                    )\r\n                                                }\r\n                                                if (viewModel.errorMessage.value == null) {\r\n                                                    foodId = \"\"\r\n                                                    foodName = \"\"\r\n                                                    foodDesc = \"\"\r\n                                                    foodPrice = \"\"\r\n                                                    selectedImageUri = null\r\n                                                    selectedCategoryId = null\r\n                                                    editingFoodItem = null\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    },\r\n                                    modifier = Modifier.height(48.dp),\r\n                                    colors = ButtonDefaults.buttonColors(containerColor = Oranye),\r\n                                    shape = RoundedCornerShape(50)\r\n                                ) {\r\n                                    Text(\r\n                                        if (editingFoodItem == null) \"Tambah Menu\" else \"Simpan Perubahan\",\r\n                                        style = MaterialTheme.typography.headlineLarge.copy(\r\n                                            color = UnguTua,\r\n                                            fontWeight = FontWeight.Bold\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    errorMessage?.let { message ->\r\n                        Text(\r\n                            text = message,\r\n                            style = MaterialTheme.typography.bodyMedium.copy(\r\n                                color = Merah,\r\n                                fontWeight = FontWeight.Medium\r\n                            ),\r\n                            modifier = Modifier.padding(horizontal = 16.dp)\r\n                        )\r\n                    }\r\n\r\n                    Card(\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        colors = CardDefaults.cardColors(containerColor = Putih),\r\n                        elevation = CardDefaults.cardElevation(4.dp)\r\n                    ) {\r\n                        Column(modifier = Modifier.padding(16.dp)) {\r\n                            Text(\r\n                                \"Daftar Kategori\",\r\n                                style = MaterialTheme.typography.headlineLarge.copy(\r\n                                    color = UnguTua,\r\n                                    fontWeight = FontWeight.Bold\r\n                                )\r\n                            )\r\n                            Spacer(modifier = Modifier.height(8.dp))\r\n                            LazyColumn(\r\n                                modifier = Modifier.heightIn(max = 100.dp)\r\n                            ) {\r\n                                items(categories) { category ->\r\n                                    Row(\r\n                                        modifier = Modifier\r\n                                            .fillMaxWidth()\r\n                                            .padding(vertical = 4.dp),\r\n                                        horizontalArrangement = Arrangement.SpaceBetween,\r\n                                        verticalAlignment = Alignment.CenterVertically\r\n                                    ) {\r\n                                        Text(\r\n                                            category.name,\r\n                                            style = MaterialTheme.typography.bodyLarge.copy(color = UnguTua),\r\n                                            modifier = Modifier.weight(1f)\r\n                                        )\r\n                                        IconButton(onClick = { showDeleteCategoryDialog = category.id }) {\r\n                                            Icon(\r\n                                                imageVector = Icons.Default.Delete,\r\n                                                contentDescription = \"Hapus Kategori\",\r\n                                                tint = Merah\r\n                                            )\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Card(\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        colors = CardDefaults.cardColors(containerColor = Putih),\r\n                        elevation = CardDefaults.cardElevation(4.dp)\r\n                    ) {\r\n                        Column(modifier = Modifier.padding(16.dp)) {\r\n                            Text(\r\n                                \"Daftar Menu\",\r\n                                style = MaterialTheme.typography.headlineLarge.copy(\r\n                                    color = UnguTua,\r\n                                    fontWeight = FontWeight.Bold\r\n                                )\r\n                            )\r\n                            Spacer(modifier = Modifier.height(8.dp))\r\n                            LazyColumn(\r\n                                modifier = Modifier.heightIn(max = 200.dp)\r\n                            ) {\r\n                                items(foodItems) { foodItem ->\r\n                                    FoodItemCard(\r\n                                        foodItem = foodItem,\r\n                                        categoryName = categories.find { it.id == foodItem.categoryId }?.name ?: \"Unknown\",\r\n                                        onEdit = {\r\n                                            editingFoodItem = foodItem\r\n                                            foodId = foodItem.id.toString()\r\n                                            foodName = foodItem.name\r\n                                            foodDesc = foodItem.description\r\n                                            foodPrice = foodItem.price.toString()\r\n                                            selectedImageUri = foodItem.imagePath\r\n                                            selectedCategoryId = foodItem.categoryId\r\n                                            viewModel.clearErrorMessage()\r\n                                        },\r\n                                        onDelete = { showDeleteFoodItemDialog = foodItem.id }\r\n                                    )\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Spacer(modifier = Modifier.height(16.dp))\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun FoodItemCard(\r\n    foodItem: FoodItemEntity,\r\n    categoryName: String,\r\n    onEdit: () -> Unit,\r\n    onDelete: () -> Unit\r\n) {\r\n    Card(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(vertical = 4.dp),\r\n        colors = CardDefaults.cardColors(containerColor = Putih),\r\n        elevation = CardDefaults.cardElevation(2.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .padding(16.dp)\r\n                .fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Column {\r\n                Text(\r\n                    foodItem.name,\r\n                    style = MaterialTheme.typography.bodyLarge.copy(\r\n                        fontWeight = FontWeight.Bold,\r\n                        color = UnguTua\r\n                    )\r\n                )\r\n                Text(\r\n                    \"Kategori: $categoryName\",\r\n                    style = MaterialTheme.typography.bodyMedium.copy(color = UnguTua)\r\n                )\r\n                Text(\r\n                    \"Harga: Rp ${foodItem.price}\",\r\n                    style = MaterialTheme.typography.bodyMedium.copy(color = UnguTua)\r\n                )\r\n            }\r\n            Row {\r\n                IconButton(onClick = onEdit) {\r\n                    Icon(\r\n                        imageVector = Icons.Default.Edit,\r\n                        contentDescription = \"Edit Menu\",\r\n                        tint = UnguTua\r\n                    )\r\n                }\r\n                IconButton(onClick = onDelete) {\r\n                    Icon(\r\n                        imageVector = Icons.Default.Delete,\r\n                        contentDescription = \"Hapus Menu\",\r\n                        tint = Merah\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfun saveImageToInternalStorage(context: Context, uri: Uri): String? {\r\n    val inputStream = context.contentResolver.openInputStream(uri) ?: return null\r\n    val file = File(context.filesDir, \"menu_${System.currentTimeMillis()}.jpg\")\r\n    inputStream.use { input ->\r\n        FileOutputStream(file).use { output ->\r\n            input.copyTo(output)\r\n        }\r\n    }\r\n    return file.absolutePath\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/main/proyek_salez/ui/manager/ManagerScreen.kt b/app/src/main/java/com/main/proyek_salez/ui/manager/ManagerScreen.kt
---- a/app/src/main/java/com/main/proyek_salez/ui/manager/ManagerScreen.kt	(revision ff5c8c1fcd5bb8193f471cd9068875d5150acbf8)
-+++ b/app/src/main/java/com/main/proyek_salez/ui/manager/ManagerScreen.kt	(date 1747280353698)
-@@ -31,14 +31,13 @@
- import androidx.hilt.navigation.compose.hiltViewModel
- import androidx.navigation.NavController
- import com.main.proyek_salez.data.model.FoodItemEntity
--import com.main.proyek_salez.data.model.CategoryEntity
--import com.main.proyek_salez.ui.manager.ManagerViewModel
- import com.main.proyek_salez.ui.SidebarMenu
- import com.main.proyek_salez.ui.theme.*
- import java.io.File
- import java.io.FileOutputStream
- import kotlinx.coroutines.launch
- import androidx.core.net.toUri
-+import com.main.proyek_salez.data.viewmodel.ManagerViewModel
- 
- @OptIn(ExperimentalMaterial3Api::class)
- @Composable
-Index: app/src/main/java/com/main/proyek_salez/data/repository/CashierRepository.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.main.proyek_salez.data.repository\r\n\r\nimport com.main.proyek_salez.data.dao.CartItemDao\r\nimport com.main.proyek_salez.data.dao.FoodDao\r\nimport com.main.proyek_salez.data.dao.OrderDao\r\nimport com.main.proyek_salez.data.model.CartItemEntity\r\nimport com.main.proyek_salez.data.model.FoodItemEntity\r\nimport com.main.proyek_salez.data.model.OrderEntity\r\nimport com.main.proyek_salez.data.model.CartItemWithFood\r\nimport com.main.proyek_salez.data.model.CategoryEntity\r\nimport kotlinx.coroutines.flow.Flow\r\nimport javax.inject.Inject\r\nimport java.time.LocalDateTime\r\n\r\nclass CashierRepository @Inject constructor(\r\n    private val cartItemDao: CartItemDao,\r\n    private val orderDao: OrderDao,\r\n    private val foodDao: FoodDao\r\n) {\r\n    fun getAllCartItems(): Flow<List<CartItemWithFood>> {\r\n        return cartItemDao.getCartItemsWithFood()\r\n    }\r\n\r\n    suspend fun addToCart(foodItem: FoodItemEntity) {\r\n        val existingItem = cartItemDao.getCartItemByFoodId(foodItem.id)\r\n        if (existingItem != null) {\r\n            cartItemDao.update(\r\n                existingItem.copy(quantity = existingItem.quantity + 1)\r\n            )\r\n        } else {\r\n            cartItemDao.insert(\r\n                CartItemEntity(foodItemId = foodItem.id, quantity = 1)\r\n            )\r\n        }\r\n    }\r\n\r\n    suspend fun decrementItem(foodItem: FoodItemEntity) {\r\n        val existingItem = cartItemDao.getCartItemByFoodId(foodItem.id)\r\n        if (existingItem != null) {\r\n            if (existingItem.quantity > 1) {\r\n                cartItemDao.update(\r\n                    existingItem.copy(quantity = existingItem.quantity - 1)\r\n                )\r\n            } else {\r\n                cartItemDao.delete(existingItem)\r\n            }\r\n        }\r\n    }\r\n\r\n    suspend fun clearCart() {\r\n        cartItemDao.clearCart()\r\n    }\r\n\r\n    suspend fun getTotalPrice(cartItems: List<CartItemWithFood>): Long {\r\n        return cartItems.sumOf { it.foodItem.price.toLong() * it.cartItem.quantity.toLong() }\r\n    }\r\n\r\n    suspend fun createOrder(customerName: String, cartItems: List<CartItemWithFood>, paymentMethod: String) {\r\n        if (cartItems.isNotEmpty()) {\r\n            val totalPrice = getTotalPrice(cartItems)\r\n            val order = OrderEntity(\r\n                customerName = customerName,\r\n                totalPrice = totalPrice,\r\n                orderDate = LocalDateTime.now(),\r\n                items = cartItems.map { it.cartItem },\r\n                paymentMethod = paymentMethod\r\n            )\r\n            orderDao.insert(order)\r\n        }\r\n    }\r\n\r\n    fun getAllFoodItems(): Flow<List<FoodItemEntity>> {\r\n        return foodDao.getAllFoodItems()\r\n    }\r\n\r\n    fun getAllOrders(): Flow<List<OrderEntity>> {\r\n        return orderDao.getAllOrders()\r\n    }\r\n\r\n    fun getFoodItemsByCategory(category: String): Flow<List<FoodItemEntity>> {\r\n        return foodDao.getFoodItemsByCategory(category)\r\n    }\r\n\r\n    suspend fun getFoodItemById(id: Long): FoodItemEntity? {\r\n        return foodDao.getFoodItemById(id)\r\n    }\r\n\r\n    fun getOrderHistory(): Flow<List<OrderEntity>> {\r\n        return orderDao.getOrderHistory()\r\n    }\r\n\r\n    suspend fun getAllCategories(): List<CategoryEntity> {\r\n        return foodDao.getAllCategories()\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/main/proyek_salez/data/repository/CashierRepository.kt b/app/src/main/java/com/main/proyek_salez/data/repository/CashierRepository.kt
---- a/app/src/main/java/com/main/proyek_salez/data/repository/CashierRepository.kt	(revision ff5c8c1fcd5bb8193f471cd9068875d5150acbf8)
-+++ b/app/src/main/java/com/main/proyek_salez/data/repository/CashierRepository.kt	(date 1747280100155)
-@@ -51,7 +51,7 @@
-         cartItemDao.clearCart()
-     }
- 
--    suspend fun getTotalPrice(cartItems: List<CartItemWithFood>): Long {
-+    fun getTotalPrice(cartItems: List<CartItemWithFood>): Long {
-         return cartItems.sumOf { it.foodItem.price.toLong() * it.cartItem.quantity.toLong() }
-     }
- 
-Index: app/src/main/java/com/main/proyek_salez/data/viewmodel/ManagerViewModel.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.main.proyek_salez.ui.manager\r\n\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.main.proyek_salez.data.model.CategoryEntity\r\nimport com.main.proyek_salez.data.model.FoodItemEntity\r\nimport com.main.proyek_salez.data.repository.ManagerRepository\r\nimport com.main.proyek_salez.data.repository.Result\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.flow.MutableStateFlow\r\nimport kotlinx.coroutines.flow.StateFlow\r\nimport kotlinx.coroutines.launch\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass ManagerViewModel @Inject constructor(\r\n    private val repository: ManagerRepository\r\n) : ViewModel() {\r\n    private val _categories = MutableStateFlow<List<CategoryEntity>>(emptyList())\r\n    val categories: StateFlow<List<CategoryEntity>> = _categories\r\n\r\n    private val _foodItems = MutableStateFlow<List<FoodItemEntity>>(emptyList())\r\n    val foodItems: StateFlow<List<FoodItemEntity>> = _foodItems\r\n\r\n    private val _errorMessage = MutableStateFlow<String?>(null)\r\n    val errorMessage: StateFlow<String?> = _errorMessage\r\n\r\n    init {\r\n        loadCategories()\r\n        loadFoodItems()\r\n    }\r\n\r\n    private fun loadCategories() {\r\n        viewModelScope.launch {\r\n            _categories.value = repository.getAllCategories()\r\n        }\r\n    }\r\n\r\n    private fun loadFoodItems() {\r\n        viewModelScope.launch {\r\n            repository.getAllFoodItems().collect { items ->\r\n                _foodItems.value = items\r\n            }\r\n        }\r\n    }\r\n\r\n    fun addCategory(name: String) {\r\n        viewModelScope.launch {\r\n            when (val result = repository.addCategory(CategoryEntity(name = name))) {\r\n                is Result.Success -> {\r\n                    loadCategories()\r\n                    _errorMessage.value = null\r\n                }\r\n                is Result.Error -> {\r\n                    _errorMessage.value = result.message\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun deleteCategory(categoryId: Long) {\r\n        viewModelScope.launch {\r\n            when (val result = repository.deleteCategory(categoryId)) {\r\n                is Result.Success -> {\r\n                    loadCategories()\r\n                    _errorMessage.value = null\r\n                }\r\n                is Result.Error -> {\r\n                    _errorMessage.value = result.message\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun addFoodItem(\r\n        id: Long,\r\n        name: String,\r\n        description: String,\r\n        price: Double,\r\n        imagePath: String?,\r\n        categoryId: Long\r\n    ) {\r\n        viewModelScope.launch {\r\n            val foodItem = FoodItemEntity(\r\n                id = id,\r\n                name = name,\r\n                description = description,\r\n                price = price,\r\n                imagePath = imagePath,\r\n                categoryId = categoryId\r\n            )\r\n            when (val result = repository.addFoodItem(foodItem)) {\r\n                is Result.Success -> {\r\n                    loadFoodItems()\r\n                    _errorMessage.value = null\r\n                }\r\n                is Result.Error -> {\r\n                    _errorMessage.value = result.message\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun updateFoodItem(\r\n        id: Long,\r\n        name: String,\r\n        description: String,\r\n        price: Double,\r\n        imagePath: String?,\r\n        categoryId: Long\r\n    ) {\r\n        viewModelScope.launch {\r\n            val foodItem = FoodItemEntity(\r\n                id = id,\r\n                name = name,\r\n                description = description,\r\n                price = price,\r\n                imagePath = imagePath,\r\n                categoryId = categoryId\r\n            )\r\n            when (val result = repository.updateFoodItem(foodItem)) {\r\n                is Result.Success -> {\r\n                    loadFoodItems()\r\n                    _errorMessage.value = null\r\n                }\r\n                is Result.Error -> {\r\n                    _errorMessage.value = result.message\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun deleteFoodItem(id: Long) {\r\n        viewModelScope.launch {\r\n            when (val result = repository.deleteFoodItem(id)) {\r\n                is Result.Success -> {\r\n                    loadFoodItems()\r\n                    _errorMessage.value = null\r\n                }\r\n                is Result.Error -> {\r\n                    _errorMessage.value = result.message\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun clearErrorMessage() {\r\n        _errorMessage.value = null\r\n    }\r\n\r\n    fun setErrorMessage(message: String?) {\r\n        _errorMessage.value = message\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/main/proyek_salez/data/viewmodel/ManagerViewModel.kt b/app/src/main/java/com/main/proyek_salez/data/viewmodel/ManagerViewModel.kt
---- a/app/src/main/java/com/main/proyek_salez/data/viewmodel/ManagerViewModel.kt	(revision ff5c8c1fcd5bb8193f471cd9068875d5150acbf8)
-+++ b/app/src/main/java/com/main/proyek_salez/data/viewmodel/ManagerViewModel.kt	(date 1747280353710)
-@@ -1,4 +1,4 @@
--package com.main.proyek_salez.ui.manager
-+package com.main.proyek_salez.data.viewmodel
- 
- import androidx.lifecycle.ViewModel
- import androidx.lifecycle.viewModelScope
-Index: app/src/main/java/com/main/proyek_salez/data/viewmodel/CashierViewModel.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.main.proyek_salez.data.viewmodel\r\n\r\nimport androidx.lifecycle.ViewModel\r\nimport com.main.proyek_salez.data.model.CartItemWithFood\r\nimport com.main.proyek_salez.data.model.CategoryEntity\r\nimport com.main.proyek_salez.data.model.FoodItemEntity\r\nimport com.main.proyek_salez.data.model.OrderEntity\r\nimport com.main.proyek_salez.data.repository.CashierRepository\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.flow.Flow\r\nimport kotlinx.coroutines.flow.flow\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass CashierViewModel @Inject constructor(\r\n    private val repository: CashierRepository\r\n) : ViewModel() {\r\n\r\n    fun getFoodItemsByCategory(category: String): Flow<List<FoodItemEntity>> {\r\n        return repository.getFoodItemsByCategory(category)\r\n    }\r\n\r\n    suspend fun addToCart(foodItem: FoodItemEntity) {\r\n        repository.addToCart(foodItem)\r\n    }\r\n\r\n    fun getAllFoodItems(): Flow<List<FoodItemEntity>> {\r\n        return repository.getAllFoodItems()\r\n    }\r\n\r\n    fun getAllOrders(): Flow<List<OrderEntity>> {\r\n        return repository.getAllOrders()\r\n    }\r\n\r\n    suspend fun getFoodItemById(id: Long): FoodItemEntity? {\r\n        return repository.getFoodItemById(id)\r\n    }\r\n\r\n    suspend fun decrementItem(foodItem: FoodItemEntity) {\r\n        repository.decrementItem(foodItem)\r\n    }\r\n\r\n    suspend fun clearCart() {\r\n        repository.clearCart()\r\n    }\r\n\r\n    suspend fun getallCartItems(): Flow<List<CartItemWithFood>> {\r\n        return repository.getAllCartItems()\r\n    }\r\n\r\n    fun getAllCategories(): Flow<List<CategoryEntity>> {\r\n        return flow {\r\n            emit(repository.getAllCategories())\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/main/proyek_salez/data/viewmodel/CashierViewModel.kt b/app/src/main/java/com/main/proyek_salez/data/viewmodel/CashierViewModel.kt
---- a/app/src/main/java/com/main/proyek_salez/data/viewmodel/CashierViewModel.kt	(revision ff5c8c1fcd5bb8193f471cd9068875d5150acbf8)
-+++ b/app/src/main/java/com/main/proyek_salez/data/viewmodel/CashierViewModel.kt	(date 1747280100207)
-@@ -44,7 +44,7 @@
-         repository.clearCart()
-     }
- 
--    suspend fun getallCartItems(): Flow<List<CartItemWithFood>> {
-+    fun getallCartItems(): Flow<List<CartItemWithFood>> {
-         return repository.getAllCartItems()
-     }
- 
Index: app/src/main/java/com/main/proyek_salez/data/viewmodel/ManagerViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.main.proyek_salez.data.viewmodel\r\n\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.main.proyek_salez.data.model.CategoryEntity\r\nimport com.main.proyek_salez.data.model.DailySummaryEntity\r\nimport com.main.proyek_salez.data.model.FoodItemEntity\r\nimport com.main.proyek_salez.data.repository.ManagerRepository\r\nimport com.main.proyek_salez.data.repository.Result\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.flow.MutableStateFlow\r\nimport kotlinx.coroutines.flow.StateFlow\r\nimport kotlinx.coroutines.flow.asStateFlow\r\nimport kotlinx.coroutines.launch\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass ManagerViewModel @Inject constructor(\r\n    private val repository: ManagerRepository\r\n) : ViewModel() {\r\n    private val _categories = MutableStateFlow<List<CategoryEntity>>(emptyList())\r\n    val categories: StateFlow<List<CategoryEntity>> = _categories\r\n\r\n    private val _foodItems = MutableStateFlow<List<FoodItemEntity>>(emptyList())\r\n    val foodItems: StateFlow<List<FoodItemEntity>> = _foodItems\r\n\r\n    private val _errorMessage = MutableStateFlow<String?>(null)\r\n    val errorMessage: StateFlow<String?> = _errorMessage\r\n\r\n    private val _summary = MutableStateFlow<DailySummaryEntity?>(null)\r\n    val summary: StateFlow<DailySummaryEntity?> = _summary.asStateFlow()\r\n\r\n    private val _error = MutableStateFlow<String?>(null)\r\n    val error: StateFlow<String?> = _error.asStateFlow()\r\n\r\n    val percentageRevenue = if (summary.value?.previousRevenue != null && summary.value?.previousRevenue!! > 0) {\r\n        val change = ((summary.value?.totalRevenue!! - summary.value?.previousRevenue!!) / summary.value?.previousRevenue!!) * 100\r\n        \"${\"%.2f\".format(change)}%\"\r\n    } else \"0.00%\"\r\n\r\n    init {\r\n        loadCategories()\r\n        loadFoodItems()\r\n        loadLatestSummary()\r\n    }\r\n\r\n    private fun loadCategories() {\r\n        viewModelScope.launch {\r\n            _categories.value = repository.getAllCategories()\r\n        }\r\n    }\r\n\r\n    private fun loadFoodItems() {\r\n        viewModelScope.launch {\r\n            repository.getAllFoodItems().collect { items ->\r\n                _foodItems.value = items\r\n            }\r\n        }\r\n    }\r\n\r\n    fun addCategory(name: String) {\r\n        viewModelScope.launch {\r\n            when (val result = repository.addCategory(CategoryEntity(name = name))) {\r\n                is Result.Success -> {\r\n                    loadCategories()\r\n                    _errorMessage.value = null\r\n                }\r\n                is Result.Error -> {\r\n                    _errorMessage.value = result.message\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun deleteCategory(categoryId: Long) {\r\n        viewModelScope.launch {\r\n            when (val result = repository.deleteCategory(categoryId)) {\r\n                is Result.Success -> {\r\n                    loadCategories()\r\n                    _errorMessage.value = null\r\n                }\r\n                is Result.Error -> {\r\n                    _errorMessage.value = result.message\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun addFoodItem(\r\n        id: Long,\r\n        name: String,\r\n        description: String,\r\n        price: Double,\r\n        imagePath: String?,\r\n        categoryId: Long\r\n    ) {\r\n        viewModelScope.launch {\r\n            val foodItem = FoodItemEntity(\r\n                id = id,\r\n                name = name,\r\n                description = description,\r\n                price = price,\r\n                imagePath = imagePath,\r\n                categoryId = categoryId\r\n            )\r\n            when (val result = repository.addFoodItem(foodItem)) {\r\n                is Result.Success -> {\r\n                    loadFoodItems()\r\n                    _errorMessage.value = null\r\n                }\r\n                is Result.Error -> {\r\n                    _errorMessage.value = result.message\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun updateFoodItem(\r\n        id: Long,\r\n        name: String,\r\n        description: String,\r\n        price: Double,\r\n        imagePath: String?,\r\n        categoryId: Long\r\n    ) {\r\n        viewModelScope.launch {\r\n            val foodItem = FoodItemEntity(\r\n                id = id,\r\n                name = name,\r\n                description = description,\r\n                price = price,\r\n                imagePath = imagePath,\r\n                categoryId = categoryId\r\n            )\r\n            when (val result = repository.updateFoodItem(foodItem)) {\r\n                is Result.Success -> {\r\n                    loadFoodItems()\r\n                    _errorMessage.value = null\r\n                }\r\n                is Result.Error -> {\r\n                    _errorMessage.value = result.message\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun deleteFoodItem(id: Long) {\r\n        viewModelScope.launch {\r\n            when (val result = repository.deleteFoodItem(id)) {\r\n                is Result.Success -> {\r\n                    loadFoodItems()\r\n                    _errorMessage.value = null\r\n                }\r\n                is Result.Error -> {\r\n                    _errorMessage.value = result.message\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun clearErrorMessage() {\r\n        _errorMessage.value = null\r\n    }\r\n\r\n    fun setErrorMessage(message: String?) {\r\n        _errorMessage.value = message\r\n    }\r\n\r\n    fun loadLatestSummary() {\r\n        viewModelScope.launch {\r\n            try {\r\n                val latestSummary = repository.getLatestSummary()\r\n                _summary.value = latestSummary\r\n                _error.value = null\r\n            } catch (e: Exception) {\r\n                _error.value = \"Gagal memuat data: ${e.message}\"\r\n            }\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/main/proyek_salez/data/viewmodel/ManagerViewModel.kt b/app/src/main/java/com/main/proyek_salez/data/viewmodel/ManagerViewModel.kt
--- a/app/src/main/java/com/main/proyek_salez/data/viewmodel/ManagerViewModel.kt	(revision 36389c7781dfbd53134208724ecd8d839e24bcbe)
+++ b/app/src/main/java/com/main/proyek_salez/data/viewmodel/ManagerViewModel.kt	(date 1748363929847)
@@ -177,5 +177,4 @@
             }
         }
     }
-
 }
\ No newline at end of file
